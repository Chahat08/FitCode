[
{
  "model": "problems.problem",
  "pk": "352a25a4-c503-4125-bcd7-555c13a150f8",
  "fields": {
    "title": "Dynamic Arrays",
    "subject": "Data Stuctures",
    "topic": "Arrays",
    "details": "An array is a sequential list type of data structure.",
    "header": "headers/DS_d0AFoO2.png",
    "youtube": "https://www.youtube.com/embed/wXeBVndWA78"
  }
},
{
  "model": "problems.problem",
  "pk": "36172c39-6046-4f9d-bc28-a6d1843115bc",
  "fields": {
    "title": "Dijkstra's Algorithm",
    "subject": "Algorithms",
    "topic": "Graph Theory, Graphs",
    "details": "Find the shortest distance to any given vertex from the source vertex in a graph.",
    "header": "headers/ALGOS_CT5DqD7.png",
    "youtube": "https://www.youtube.com/embed/pSqmAO-m7Lk"
  }
},
{
  "model": "problems.problem",
  "pk": "39bbaa0a-c921-456a-b7a8-c1f2b11f61f4",
  "fields": {
    "title": "Create a Binary Search Tree",
    "subject": "Data Structures",
    "topic": "Binary Search Trees, BST, Trees, Binary Trees",
    "details": "A Binary Search Tree (BST) is a tree in which any node's left children will be smaller or equal to it, and right children will be greater than it.",
    "header": "headers/DS.png",
    "youtube": "https://www.youtube.com/embed/COZK7NATh4k"
  }
},
{
  "model": "problems.problem",
  "pk": "39e6a619-daf2-41c4-bcf9-1e7092dbce2c",
  "fields": {
    "title": "Towers of Hanoi",
    "subject": "Algorithms",
    "topic": "Recursion",
    "details": "This problem involves moving all disks from an initial rod to some other rod in the minimum possible moves.",
    "header": "headers/ALGOS.png",
    "youtube": "https://www.youtube.com/embed/YstLjLCGmgg"
  }
},
{
  "model": "problems.problem",
  "pk": "3e57ccc4-eaef-41ab-8a92-f8712af83c1e",
  "fields": {
    "title": "Readers-Writers Problem",
    "subject": "Operating Systems",
    "topic": "Concurrency Management, Process Synchronization, Semaphores",
    "details": "Some processes on a file are readers and some on them are writers, acting at the same time.",
    "header": "headers/OS_SuKi7wH.png",
    "youtube": "https://www.youtube.com/embed/p2XDhW5INOo"
  }
},
{
  "model": "problems.problem",
  "pk": "44c9dabb-1623-4139-89ca-abf5d84c3f3e",
  "fields": {
    "title": "Implement a Stacks using Array",
    "subject": "Data Structures",
    "topic": "Stacks, Arrays",
    "details": "A stack is a last-in-first-out (LIFO) kind of data structure.",
    "header": "headers/DS_34Aghg8.png",
    "youtube": "https://www.youtube.com/embed/sFVxsglODoo"
  }
},
{
  "model": "problems.problem",
  "pk": "a50727c5-150c-48e7-b964-9da41bc6c66b",
  "fields": {
    "title": "Static Arrays",
    "subject": "Data Structures",
    "topic": "Arrays",
    "details": "Arrays are sequential list data structures.",
    "header": "headers/DS_rTQ3XHd.png",
    "youtube": "https://www.youtube.com/embed/pmN9ExDf3yQ"
  }
},
{
  "model": "problems.problem",
  "pk": "ccf103bf-ce6a-43a0-9fa0-f8c4f3fef4be",
  "fields": {
    "title": "Reverse a Linked List",
    "subject": "Data Structures",
    "topic": "Linked Lists",
    "details": "Reversing a linked list means that the previous last node would now be the head of the list. This can be done in linear time.",
    "header": "headers/DS_6Y0SDZ5.png",
    "youtube": "https://www.youtube.com/embed/sYcOK51hl-A"
  }
},
{
  "model": "problems.problem",
  "pk": "e3ca0d9f-7d3b-4a44-bd95-f3b2a15d2248",
  "fields": {
    "title": "Implement a Doubly Linked List",
    "subject": "Data Structures",
    "topic": "Linked Lists, Doubly Linked Lists",
    "details": "In a doubly linked list, each node has two pointers: one points to the next element, and the other points to the previous one, in addition to it's data.",
    "header": "headers/DS_Y3RxEwa.png",
    "youtube": "https://www.youtube.com/embed/VOQNf1VxU3Q"
  }
},
{
  "model": "problems.problem",
  "pk": "fc8fa9c1-59b6-42ba-8eb0-844e26ca52fa",
  "fields": {
    "title": "Dining Philosophers Problem",
    "subject": "Operating Systems",
    "topic": "Process Synchronization, Semaphores",
    "details": "Five philosphers are dining around a table and they alternate between eating and thinking.",
    "header": "headers/OS.png",
    "youtube": "https://www.youtube.com/embed/FYUi-u7UWgw"
  }
},
{
  "model": "problems.problem",
  "pk": "ff7cbee6-4736-4b57-b197-f8741ed2238d",
  "fields": {
    "title": "Create a Linked List",
    "subject": "Data Structures",
    "topic": "Linked Lists",
    "details": "A linked list is a sequential data structure in which memory need not be contiguously allocated to consecutive elements.",
    "header": "headers/DS_SafKNcR.png",
    "youtube": "https://www.youtube.com/embed/vcQIFT79_50"
  }
},
{
  "model": "problems.problemurl",
  "pk": 1,
  "fields": {
    "problem": "fc8fa9c1-59b6-42ba-8eb0-844e26ca52fa",
    "url": "https://pages.mtu.edu/~shene/NSF-3/e-Book/MUTEX/TM-example-philos-1.html"
  }
},
{
  "model": "problems.problemurl",
  "pk": 2,
  "fields": {
    "problem": "fc8fa9c1-59b6-42ba-8eb0-844e26ca52fa",
    "url": "https://medium.com/swlh/the-dining-philosophers-problem-bbdb92e6b788"
  }
},
{
  "model": "problems.problemurl",
  "pk": 3,
  "fields": {
    "problem": "3e57ccc4-eaef-41ab-8a92-f8712af83c1e",
    "url": "https://www.studytonight.com/operating-system/readers-writer-problem"
  }
},
{
  "model": "problems.problemurl",
  "pk": 4,
  "fields": {
    "problem": "3e57ccc4-eaef-41ab-8a92-f8712af83c1e",
    "url": "https://afteracademy.com/blog/the-reader-writer-problem-in-operating-system"
  }
},
{
  "model": "problems.problemurl",
  "pk": 5,
  "fields": {
    "problem": "39e6a619-daf2-41c4-bcf9-1e7092dbce2c",
    "url": "https://www.educative.io/edpresso/what-is-the-tower-of-hanoi-problem"
  }
},
{
  "model": "problems.problemurl",
  "pk": 6,
  "fields": {
    "problem": "39e6a619-daf2-41c4-bcf9-1e7092dbce2c",
    "url": "https://www.mathscareers.org.uk/tower-of-hanoi/"
  }
},
{
  "model": "problems.problemurl",
  "pk": 7,
  "fields": {
    "problem": "39bbaa0a-c921-456a-b7a8-c1f2b11f61f4",
    "url": "https://www.cs.usfca.edu/~galles/visualization/BST.html"
  }
},
{
  "model": "problems.problemurl",
  "pk": 8,
  "fields": {
    "problem": "36172c39-6046-4f9d-bc28-a6d1843115bc",
    "url": "https://brilliant.org/wiki/dijkstras-short-path-finder/"
  }
},
{
  "model": "problems.problemurl",
  "pk": 9,
  "fields": {
    "problem": "36172c39-6046-4f9d-bc28-a6d1843115bc",
    "url": "https://www.programiz.com/dsa/dijkstra-algorithm"
  }
},
{
  "model": "problems.problemurl",
  "pk": 10,
  "fields": {
    "problem": "a50727c5-150c-48e7-b964-9da41bc6c66b",
    "url": "https://www.geeksforgeeks.org/introduction-to-arrays/"
  }
},
{
  "model": "problems.problemurl",
  "pk": 11,
  "fields": {
    "problem": "a50727c5-150c-48e7-b964-9da41bc6c66b",
    "url": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"
  }
},
{
  "model": "problems.problemurl",
  "pk": 12,
  "fields": {
    "problem": "352a25a4-c503-4125-bcd7-555c13a150f8",
    "url": "https://press.rebus.community/programmingfundamentals/chapter/fixed-and-dynamic-arrays/#:~:text=A%20dynamic%20array%20is%20a,to%20be%20specified%20at%20allocation."
  }
},
{
  "model": "problems.problemurl",
  "pk": 13,
  "fields": {
    "problem": "ff7cbee6-4736-4b57-b197-f8741ed2238d",
    "url": "https://www.programiz.com/dsa/linked-list"
  }
},
{
  "model": "problems.problemurl",
  "pk": 14,
  "fields": {
    "problem": "ccf103bf-ce6a-43a0-9fa0-f8c4f3fef4be",
    "url": "https://favtutor.com/blogs/reverse-a-linked-list-cpp"
  }
},
{
  "model": "problems.problemurl",
  "pk": 15,
  "fields": {
    "problem": "e3ca0d9f-7d3b-4a44-bd95-f3b2a15d2248",
    "url": "https://www.javatpoint.com/doubly-linked-list"
  }
},
{
  "model": "problems.problemurl",
  "pk": 16,
  "fields": {
    "problem": "e3ca0d9f-7d3b-4a44-bd95-f3b2a15d2248",
    "url": "https://www.programiz.com/dsa/doubly-linked-list"
  }
},
{
  "model": "problems.problemurl",
  "pk": 17,
  "fields": {
    "problem": "44c9dabb-1623-4139-89ca-abf5d84c3f3e",
    "url": "http://www.btechsmartclass.com/data_structures/stack-using-array.html"
  }
},
{
  "model": "problems.problemurl",
  "pk": 18,
  "fields": {
    "problem": "44c9dabb-1623-4139-89ca-abf5d84c3f3e",
    "url": "http://www.btechsmartclass.com/data_structures/stack-using-array.html"
  }
}
]
